return {
    Init = function(UI, Core, Notify)
        task.defer(function()
            repeat task.wait() until UI and UI.Sections and UI.Tabs and UI.Tabs.LocalPlayer

            local Players = game:GetService("Players")
            local UIS = game:GetService("UserInputService")
            local RunService = game:GetService("RunService")
            local lp = Players.LocalPlayer

            getgenv().HitboxRoll = false
            local toggleMasterEnabled = false
            local mobileGuiVisible = false
            local minimized = false

            UI.Sections.AntiLock:Header({ Name = "Hitbox Roll" })

            local screenGui = Instance.new("ScreenGui")
            screenGui.Name = "HitboxRollGui"
            screenGui.ResetOnSpawn = false
            screenGui.Enabled = false
            pcall(function()
                screenGui.Parent = game:GetService("CoreGui")
            end)

            local mainFrame = Instance.new("Frame")
            mainFrame.Name = "Main"
            mainFrame.Size = UDim2.new(0, 200, 0, 100)
            mainFrame.Position = UDim2.new(0.5, -100, 0.8, 0)
            mainFrame.BackgroundColor3 = Color3.fromRGB(23, 32, 46)
            mainFrame.BorderSizePixel = 0
            mainFrame.BackgroundTransparency = 0.15
            mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
            mainFrame.Parent = screenGui

            local corner = Instance.new("UICorner", mainFrame)
            corner.CornerRadius = UDim.new(0, 10)

            local stroke = Instance.new("UIStroke", mainFrame)
            stroke.Color = Color3.fromRGB(80, 130, 255)
            stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            local dragHandle = Instance.new("Frame")
            dragHandle.Name = "DragHandle"
            dragHandle.Size = UDim2.new(1, 0, 0, 20)
            dragHandle.Position = UDim2.new(0, 0, 0, 0)
            dragHandle.BackgroundColor3 = Color3.fromRGB(17, 24, 34)
            dragHandle.BackgroundTransparency = 0.2
            dragHandle.BorderSizePixel = 0
            dragHandle.Parent = mainFrame

            local dragLabel = Instance.new("TextLabel")
            dragLabel.Text = "➕"
            dragLabel.Font = Enum.Font.GothamBold
            dragLabel.TextSize = 14
            dragLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            dragLabel.BackgroundTransparency = 1
            dragLabel.Size = UDim2.new(0, 20, 1, 0)
            dragLabel.Position = UDim2.new(1, -44, 0, 0)
            dragLabel.TextXAlignment = Enum.TextXAlignment.Center
            dragLabel.TextYAlignment = Enum.TextYAlignment.Center
            dragLabel.Parent = dragHandle

            local minimizeBtn = Instance.new("TextButton")
            minimizeBtn.Text = "➖"
            minimizeBtn.Font = Enum.Font.GothamBold
            minimizeBtn.TextSize = 14
            minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            minimizeBtn.BackgroundTransparency = 1
            minimizeBtn.Size = UDim2.new(0, 20, 1, 0)
            minimizeBtn.Position = UDim2.new(1, -24, 0, 0)
            minimizeBtn.TextXAlignment = Enum.TextXAlignment.Center
            minimizeBtn.Parent = dragHandle

            local title = Instance.new("TextLabel")
            title.Text = "Hitbox Roll"
            title.Font = Enum.Font.GothamBold
            title.TextSize = 16
            title.TextColor3 = Color3.fromRGB(255, 255, 255)
            title.BackgroundTransparency = 1
            title.Position = UDim2.new(0, 10, 0, 5)
            title.Size = UDim2.new(1, -20, 0, 20)
            title.TextXAlignment = Enum.TextXAlignment.Left
            title.Parent = mainFrame

            local statusLabel = Instance.new("TextButton")
            statusLabel.Text = "⦿ Hitbox Roll: OFF"
            statusLabel.Font = Enum.Font.Gotham
            statusLabel.TextSize = 14
            statusLabel.TextColor3 = Color3.fromRGB(200, 220, 255)
            statusLabel.BackgroundColor3 = Color3.fromRGB(30, 38, 55)
            statusLabel.Position = UDim2.new(0, 10, 0, 35)
            statusLabel.Size = UDim2.new(1, -20, 0, 40)
            statusLabel.TextXAlignment = Enum.TextXAlignment.Left
            statusLabel.Parent = mainFrame
            Instance.new("UICorner", statusLabel).CornerRadius = UDim.new(0, 6)

            minimizeBtn.MouseButton1Click:Connect(function()
                minimized = not minimized
                statusLabel.Visible = not minimized
                mainFrame.Size = minimized and UDim2.new(0, 200, 0, 30) or UDim2.new(0, 200, 0, 100)
                minimizeBtn.Text = minimized and "⿻" or "➖"
            end)

            local dragging = false
            local dragStart, startPos
            local inputConn

            local function onInputChanged(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local delta = input.Position - dragStart
                    mainFrame.Position = UDim2.new(
                        startPos.X.Scale,
                        startPos.X.Offset + delta.X,
                        startPos.Y.Scale,
                        startPos.Y.Offset + delta.Y
                    )
                end
            end

            local function onInputEnded()
                dragging = false
                if inputConn then inputConn:Disconnect() inputConn = nil end
            end

            dragHandle.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    dragStart = input.Position
                    startPos = mainFrame.Position
                    if inputConn then inputConn:Disconnect() end
                    inputConn = input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            onInputEnded()
                        end
                    end)
                end
            end)

            UIS.InputChanged:Connect(onInputChanged)

            statusLabel.MouseButton1Click:Connect(function()
                if not toggleMasterEnabled then
                    Notify("Hitbox Roll", "Enable from toggle first!", 2)
                    return
                end
                getgenv().HitboxRoll = not getgenv().HitboxRoll
                statusLabel.Text = getgenv().HitboxRoll and "⦿ Hitbox Roll: ON" or "⦿ Hitbox Roll: OFF"
                Notify("Hitbox Roll", getgenv().HitboxRoll and "Enabled (Mobile)" or "Disabled (Mobile)", 2)
            end)

            UI.Sections.AntiLock:Toggle({
                Name = "Hitbox Roll",
                Default = false,
                Callback = function(state)
                    toggleMasterEnabled = state
                    getgenv().HitboxRoll = false
                    screenGui.Enabled = toggleMasterEnabled and mobileGuiVisible
                    statusLabel.Text = "⦿ Hitbox Roll: OFF"
                    Notify("Hitbox Roll", state and "Ready for Mobile Use" or "Disabled", 2)
                end
            }, "HitboxRoll")

            UI.Sections.AntiLock:Toggle({
                Name = "Show Mobile Gui",
                Default = false,
                Callback = function(state)
                    mobileGuiVisible = state
                    screenGui.Enabled = toggleMasterEnabled and mobileGuiVisible
                    Notify("Mobile GUI", state and "Shown" or "Hidden", 2)
                end
            }, "HitboxRollGuiToggle")

            UI.Sections.AntiLock:Keybind({
                Name = "Toggle Hitbox Roll Key",
                Mode = "Toggle",
                Default = Enum.KeyCode.H,
                Callback = function()
                    if not toggleMasterEnabled then
                        Notify("Hitbox Roll", "Enable Hitbox Roll first!", 2)
                        return
                    end
                    getgenv().HitboxRoll = not getgenv().HitboxRoll
                    statusLabel.Text = getgenv().HitboxRoll and "⦿ Hitbox Roll: ON" or "⦿ Hitbox Roll: OFF"
                    Notify("Hitbox Roll", getgenv().HitboxRoll and "Enabled (Keybind)" or "Disabled (Keybind)", 2)
                end
            }, "HitboxRollKey")

            local orbitRadius, rollSpeed = 4, 1440
            local flickerAmplitude, spoofYVelocity = 1.5, true
            local velocityRangeY = 250
            local originalCFrame, originalVelocity

            RunService.Heartbeat:Connect(function()
                if not getgenv().HitboxRoll then return end

                local char = lp.Character
                if not char then return end

                local hrp = char:FindFirstChild("HumanoidRootPart")
                if not hrp then return end

                originalCFrame = hrp.CFrame
                originalVelocity = hrp.AssemblyLinearVelocity

                local success = pcall(function()
                    hrp:SetNetworkOwner(lp)
                end)
                if not success then
                    pcall(function() hrp:SetNetworkOwner(nil) end)
                end

                local now = tick()
                local angle = now * math.pi * 4
                local orbitOffset = Vector3.new(
                    math.cos(angle) * orbitRadius,
                    math.sin(angle * 1.5) * orbitRadius * 0.5,
                    math.sin(angle) * orbitRadius
                )

                local flickerOffset = Vector3.new(
                    math.random(-150, 150) / 100,
                    math.random(-150, 150) / 100,
                    math.random(-150, 150) / 100
                )

                local totalOffset = orbitOffset + flickerOffset
                local rollAngle = math.rad(now * rollSpeed % 360)
                local rollCF = CFrame.Angles(rollAngle, rollAngle, rollAngle)

                local newCF = hrp.CFrame * rollCF * CFrame.new(totalOffset)
                char:PivotTo(newCF)

                if spoofYVelocity then
                    local spoofY = math.clamp(math.random(-velocityRangeY, velocityRangeY), -120, 120)
                    hrp.AssemblyLinearVelocity = Vector3.new(
                        originalVelocity.X,
                        spoofY,
                        originalVelocity.Z
                    )
                end

                RunService.RenderStepped:Wait()
                char:PivotTo(originalCFrame)
                hrp.AssemblyLinearVelocity = originalVelocity
            end)

            local OldIndex
            OldIndex = hookmetamethod(game, "__index", newcclosure(function(self, key)
                if getgenv().HitboxRoll and not checkcaller() then
                    if key == "CFrame"
                        and lp.Character
                        and lp.Character:FindFirstChild("HumanoidRootPart")
                        and lp.Character:FindFirstChild("Humanoid")
                        and lp.Character.Humanoid.Health > 0 then

                        if self == lp.Character.HumanoidRootPart then
                            return originalCFrame or CFrame.new()
                        elseif self == lp.Character.Head then
                            return (originalCFrame or CFrame.new()) + Vector3.new(0, lp.Character.HumanoidRootPart.Size / 2 + 0.5, 0)
                        end
                    end
                end
                return OldIndex(self, key)
            end))
        end)
    end
}
